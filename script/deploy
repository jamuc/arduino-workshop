#!/usr/bin/env node
'use strict';

const execa = require('execa');
const got = require('gh-got');
const Ora = require('ora');

const ghStatus = (status, id) => {
  const owner = 'stoe';
  const repo = 'arduino-sample';

  let cmd = `repos/${owner}/${repo}/deployments`;
  let body = {
    ref: process.env.TRAVIS_PULL_REQUEST_SHA,
    description: 'Deploying to Arduino...',
    auto_merge: false,    // eslint-disable-line camelcase
    required_contexts: [] // eslint-disable-line camelcase
  };

  if (status && id) {
    cmd = `repos/${owner}/${repo}/deployments/${id}/statuses`;
    body = {
      state: status,
      description: 'Deploying to Arduino...'
    };
  }

  return new Promise((resolve, reject) => {
    got(cmd, {
      token: process.env.GH_TOKEN,
      method: 'POST',
      body,
      headers: {
        accept: 'application/vnd.github.v3+json'
      }
    })
      .then(res => resolve(res.body.id))
      .catch(err => reject(err));
  });
};

const ora = new Ora({
  text: 'pio remote upload'
}).start();

if (!process.env.TRAVIS_PULL_REQUEST) {
  ora.info('not a pull request.');
  ora.stop();
  process.exit(0);
}

ghStatus()
  .then(id => {
    execa
      .shell(`pio account login -u ${process.env.PIO_USERNAME} -p ${process.env.PIO_PASSWORD}`)
      .then(() => {
        execa
          .shell(`pio remote --agent ${process.env.PIO_AGENT} run -e ${process.env.PIO_BORAD} -t upload -s`)
          .then(() => {
            ghStatus('success', id);
            ora.succeed();
          })
          .catch(err => {
            throw err;
          });
      })
      .catch(err => {
        ghStatus('error', id);
        throw new Error(err.stderr);
      });
  })
  .catch(err => {
    ora.fail(err.message);

    console.log(err);
  });
